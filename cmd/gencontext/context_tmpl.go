package main

var contextTemplate = `
	// generated by gencontext {{.Invocation}}; DO NOT EDIT

	package {{.Package}}

	import (
		{{.AdditionalImports}}

		"golang.org/x/net/context"
	)

	type keyType int
	var key keyType

	// NewContext creates a new context with the given {{.Type}}
	func NewContext(ctx context.Context, val {{.Type}}) context.Context {
		return context.WithValue(ctx, key, val)
	}

	// FromContext loads the {{.Type}} from the context
	func FromContext(ctx context.Context) (val {{.Type}}, ok bool) {
		val, ok = ctx.Value(key).({{.Type}})
		return
	}

	// Must returns the given type or panics if the ok boolean is false
	func Must(val {{.Type}}, ok bool) {{.Type}} {
		if !ok {
			panic("Can not get {{.Type}} from context")
		}

		return val
	}

	// FromContextDefault returns the given FromContext results or, if empty, returns the default value
	func FromContextDefault(ctx context.Context, def {{.Type}}) {{.Type}} {
		val, ok := ctx.Value(key).({{.Type}})
		if !ok {
			return def
		}

		return val
	}
`
