// generated by gencontext -type Enum .; DO NOT EDIT

package enum

import (
	"golang.org/x/net/context"
)

type keyType int

var key keyType

// NewContext creates a new context with the given Enum
func NewContext(ctx context.Context, val Enum) context.Context {
	return context.WithValue(ctx, key, val)
}

// FromContext loads the Enum from the context
func FromContext(ctx context.Context) (val Enum, ok bool) {
	val, ok = ctx.Value(key).(Enum)
	return
}

// Must returns the given type or panics if the ok boolean is false
func Must(val Enum, ok bool) Enum {
	if !ok {
		panic("Can not get Enum from context")
	}

	return val
}

// FromContextDefault returns the given FromContext results or, if empty, returns the default value
func FromContextDefault(ctx context.Context, def Enum) Enum {
	val, ok := ctx.Value(key).(Enum)
	if !ok {
		return def
	}

	return val
}
